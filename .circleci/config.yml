# to use orbs, must use version >= 2.1
version: 2.1
orbs:
  # import Cypress orb by specifying an exact version x.y.z
  # or the latest version 1.x.x using "@1" syntax
  # https://github.com/cypress-io/circleci-orb
  cypress: cypress-io/cypress@1

parameters:
  TEST_BRANCH:
    type: string
    default: 'main'
  # by default, test the production deployment
  TEST_URL:
    type: string
    default: 'https://todomvc-no-tests-vercel.vercel.app/'
  # allow running selected tests once or multiple times
  # using the cypress-grep plugin
  # https://github.com/cypress-io/cypress-grep
  GREP:
    type: string
    default: ''
  BURN:
    type: integer
    default: 1
  TEST_COMMIT:
    description: 'Source commit SHA if known to report status checks'
    type: string
    default: ''

# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
commands:
  switch_branch:
    description: |
      Changes the current branch to the latest commit on the specific branch.
      NOTE: if the branch does not exist, does nothing.
    parameters:
      BRANCH_NAME:
        type: string
        default: ''
    steps:
      - when:
          condition: << parameters.BRANCH_NAME >>
          steps:
            - run:
                name: Checkout branch << parameters.BRANCH_NAME >>
                command: |
                  echo "Switching to branch << parameters.BRANCH_NAME >> if it exists"
                  git checkout << parameters.BRANCH_NAME >> || true
                  git pull origin << parameters.BRANCH_NAME >> || true
  print_git:
    description: |
      Prints the current git branch and the commit hash.
    steps:
      - run:
          name: Print current Git info
          # looks like Cypress default executor does not have
          # a very recent Git version, thus we cannot use "--show-current"
          command: |
            echo "current branch is: $(git branch -a)"
            echo "current commit is: $(git rev-parse --short HEAD)"

jobs:
  info:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      - run:
          name: print variables
          command: |
            echo "TEST_BRANCH is << pipeline.parameters.TEST_BRANCH >>"
            echo "TEST_URL is << pipeline.parameters.TEST_URL >>"
            echo "GREP is << pipeline.parameters.GREP >>"
            echo "BURN is << pipeline.parameters.BURN >>"
            echo "TEST_COMMIT is << pipeline.parameters.TEST_COMMIT >>"

  # preview deploys might take a little bit to be ready
  # this job pings the TEST_URL to check if the deployment has finished
  wait-for-deploy:
    machine:
      image: ubuntu-2004:202104-01
    steps:
      # we don't really need to check TEST_URL,
      # since we only run the entire workflow when it is present
      # but I like to remember how to use the Circle halt command
      - unless:
          condition: << pipeline.parameters.TEST_URL >>
          steps:
            # https://circleci.com/docs/2.0/configuration-reference/#ending-a-job-from-within-a-step
            - run: circleci-agent step halt
      - run:
          name: wait for deployment
          command: |
            echo "Using wait-on to check if the URL << pipeline.parameters.TEST_URL >> responds"
            echo "See https://www.npmjs.com/package/wait-on"
            npx wait-on --verbose \
              --interval 10000 --timeout 60000 \
              << pipeline.parameters.TEST_URL >>

workflows:
  e2e:
    # only run the workflow when TEST_URL is set
    when: << pipeline.parameters.TEST_URL >>
    jobs:
      - info
      - wait-for-deploy

      - cypress/install:
          name: Cypress install
          # after install, set the pending commit status right away
          post-install:
            - run:
                name: Check if need to skip Cypress tests
                command: |
                  if npx should-pr-run-cypress-tests --pr-url $CIRCLE_PULL_REQUEST; then
                    echo "Should be running Cypress tests âœ…"
                  else
                    echo "Skipping Cypress tests ðŸ˜´"
                    circleci-agent step halt
                  fi
            - run:
                name: Set common commit status
                command: |
                  if [[ ! -z "<< pipeline.parameters.TEST_COMMIT >>" ]]; then
                    echo "Setting commit status to pending"
                    npx set-gh-status \
                      --owner bahmutov --repo todomvc-no-tests-vercel \
                      --sha << pipeline.parameters.TEST_COMMIT >> --status pending \
                      --context "Cypress E2E tests" --description "Running tests..."
                  else
                    echo "No commit to set status for"
                  fi

      - cypress/run:
          name: Cypress E2E tests
          requires:
            - Cypress install
            - wait-for-deploy
          # switch to the test branch before installing and running tests
          post-checkout:
            - switch_branch:
                BRANCH_NAME: << pipeline.parameters.TEST_BRANCH >>

          config: 'baseUrl=<< pipeline.parameters.TEST_URL >>'
          # pass the cypress-grep parameters through the --env parameter
          env: grep="<< pipeline.parameters.GREP >>",burn=<< pipeline.parameters.BURN >>,testCommit=<< pipeline.parameters.TEST_COMMIT >>
          # pass grep parameters if any
          # env: 'grep=<< pipeline.parameters.GREP >>,burn=<< pipeline.parameters.BURN >>'
          # save videos and screenshots on Circle as artifacts
          store_artifacts: true
          # we do not need to save the workspace after the tests are done
          no-workspace: true
          # record test results on Cypress Dashboard
          record: true
          parallel: true
          parallelism: 2
          group: e2e
          # tag the recording with the branch name to make it easier to find
          tags: '<< pipeline.parameters.TEST_BRANCH >>'
